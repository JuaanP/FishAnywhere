plugins {
    // Required for NeoGradle
    id "org.jetbrains.gradle.plugin.idea-ext" version "1.1.7"
    id "com.modrinth.minotaur" version "2.+" apply false
    id "com.matthewprenger.cursegradle" version "1.4.0" apply false
}

// Leer propiedades desde local.properties
def localProperties = new Properties()
def localPropertiesFile = file("${rootDir}/local.properties")
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

// Configuración mínima para los subproyectos
subprojects {
    afterEvaluate {
        // Deshabilitar la generación de javadoc y sources jars
        tasks.withType(Javadoc) {
            enabled = false
        }
        
        tasks.withType(Jar) {
            // Deshabilitar los jar de sources y javadoc
            if (name.contains('sources') || name.contains('javadoc')) {
                enabled = false
            }
            
            // Para archivos jar principales, asegurarse de que no tengan el sufijo -dev
            if (name == 'jar') {
                archiveClassifier = ''
            }
        }
        
        // Configuración específica de Mixin para proyectos Forge/NeoForge
        if (project.name in ['forge', 'neoforge']) {
            if (project.plugins.hasPlugin('org.spongepowered.mixin')) {
                mixin {
                    // Asegurarse de que los refmaps se generen correctamente
                    add sourceSets.main, "fishanywhere.refmap.json"
                    
                    // Configurar correctamente el mixin config
                    config "fishanywhere.forge.mixins.json"
                    
                    // Importante: incluir debug info para detectar problemas
                    debug.export = true
                }
                
                // Asegurarse de que el archivo refmap se incluya en el JAR final
                jar {
                    manifest {
                        attributes([
                            'MixinConfigs': 'fishanywhere.forge.mixins.json',
                            'FMLCorePluginContainsFMLMod': 'true'
                        ])
                    }
                    
                    // Incluir el archivo refmap en el JAR final
                    from "${project.buildDir}/tmp/mixin/fishanywhere.refmap.json"
                }
            }
        }
        
        // Configuración específica de Mixin para proyectos Fabric
        if (project.name == 'fabric') {
            if (project.plugins.hasPlugin('org.spongepowered.mixin')) {
                mixin {
                    // Usar un refmap separado para Fabric para evitar conflictos
                    add sourceSets.main, "fishanywhere.fabric.refmap.json"
                    
                    // Importante: incluir debug info para detectar problemas
                    debug.export = true
                }
                
                // Para Fabric, asegurarnos de que el archivo refmap se incluya en el JAR
                jar {
                    from "${project.buildDir}/tmp/mixin/fishanywhere.fabric.refmap.json"
                }
            }
        }
        
        // Añadir plugins de publicación para los loaders soportados
        if (project.name in ['fabric', 'forge', 'neoforge']) {
            plugins.apply('com.modrinth.minotaur')
            plugins.apply('com.matthewprenger.cursegradle')
            
            // Configurar datos comunes para las publicaciones
            ext {
                releaseType = "release" // Opciones: release, beta, alpha
                changelogFile = file("${rootDir}/CHANGELOG.md")
                
                // IDs de proyecto desde local.properties
                modrinthId = localProperties.getProperty('modrinth_id', '')
                curseforgeId = localProperties.getProperty('curseforge_id', '')
                
                // Relacionamiento entre versiones de Minecraft y loaders
                gameVersions = [minecraft_version]
                loaders = []
                
                // Configurar loaders específicos
                if (project.name == 'fabric') {
                    loaders.add("fabric")
                } else if (project.name == 'forge') {
                    loaders.add("forge")
                } else if (project.name == 'neoforge') {
                    loaders.add("neoforge")
                }
            }
            
            // Para proyectos Fabric específicamente, configurar loom para producción
            if (project.name == 'fabric') {
                loom {
                    runs {
                        // Marcar como build de producción
                        client {
                            runDir = "build/runClient"
                            ideConfigGenerated = true
                            // NO es una build de desarrollo
                            property("fabric.development", "false")
                        }
                        server {
                            runDir = "build/runServer"
                            // NO es una build de desarrollo
                            property("fabric.development", "false")
                        }
                    }
                }
            }
            
            // Configurar Modrinth
            modrinth {
                token = localProperties.getProperty('modrinth_token', '')
                projectId = modrinthId
                versionNumber = "${project.version}"
                versionName = "${project.version} (${project.name.capitalize()}) for MC ${minecraft_version}"
                uploadFile = tasks.jar
                gameVersions = project.gameVersions
                loaders = project.loaders
                changelog = changelogFile.exists() ? changelogFile.text : "No changelog provided"
                releaseType = project.releaseType
                
                dependencies {
                    // Dependencias requeridas
                    if (project.name == 'fabric') {
                        required.project "fabric-api"
                    }
                }
            }
            
            // Configurar CurseForge
            curseforge {
                apiKey = localProperties.getProperty('curseforge_token', '')
                project {
                    id = curseforgeId
                    releaseType = project.releaseType
                    
                    // Archivos a subir
                    mainArtifact(tasks.jar) {
                        // displayName = "${project.version} (${project.name.capitalize()}) for MC ${minecraft_version}"
                    }
                    
                    // Versiones de Minecraft compatibles
                    gameVersions.each { version ->
                        addGameVersion version
                    }
                    
                    // Loaders de mod
                    if (project.name == 'fabric') {
                        addGameVersion "Fabric"
                    } else if (project.name == 'forge') {
                        addGameVersion "Forge" 
                    } else if (project.name == 'neoforge') {
                        addGameVersion "NeoForge"
                    }
                    
                    changelog = changelogFile.exists() ? changelogFile.text : "No changelog provided"
                    
                    // Dependencias requeridas
                    if (project.name == 'fabric') {
                        relations {
                            requiredDependency 'fabric-api'
                        }
                    }
                }
            }
        }
    }
}

// Tarea para publicar todos los loaders a la vez
task publishMod {
    description 'Publica todos los loaders a Modrinth y CurseForge'
    group 'publishing'
    
    // Depende de las tareas de publicación de todos los subproyectos
    dependsOn subprojects.findAll { it.name in ['fabric', 'forge', 'neoforge'] }.collect { 
        [
            ":${it.name}:modrinth", 
            ":${it.name}:curseforge"
        ]
    }.flatten()
}

// Tarea utilitaria para eliminar archivos JAR antiguos
tasks.register('cleanBuilds', Delete) {
    description 'Elimina la carpeta builds y su contenido'
    group 'build'
    delete "${rootDir}/builds"
}