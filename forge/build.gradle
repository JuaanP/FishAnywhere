plugins {
    id 'multiloader-loader'
    id 'net.minecraftforge.gradle' version '[6.0,6.2)'
    id 'org.spongepowered.mixin' version '0.7-SNAPSHOT'
    id 'com.modrinth.minotaur'
    id 'com.matthewprenger.cursegradle'
}

base {
    archivesName = "${mod_id}-forge-${minecraft_version}-v"
}

mixin {
    add(sourceSets.main, "${mod_id}.refmap.json")

    config("${mod_id}.mixins.json")
    config("${mod_id}.forge.mixins.json")
}

minecraft {
    mappings channel: 'official', version: minecraft_version

    copyIdeResources = true //Calls processResources when in dev

    // Automatically enable forge AccessTransformers if the file exists
    // This location is hardcoded in Forge and can not be changed.
    // https://github.com/MinecraftForge/MinecraftForge/blob/be1698bb1554f9c8fa2f58e32b9ab70bc4385e60/fmlloader/src/main/java/net/minecraftforge/fml/loading/moddiscovery/ModFile.java#L123
    def at = file('src/main/resources/META-INF/accesstransformer.cfg')
    if (at.exists()) {
        accessTransformer = at
    }

    runs {
        client {
            workingDirectory file('runs/client')
            ideaModule "${rootProject.name}.${project.name}.main"
            taskName 'Client'
            mods {
                modClientRun {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory file('runs/server')
            ideaModule "${rootProject.name}.${project.name}.main"
            taskName 'Server'
            mods {
                modServerRun {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory file('runs/data')
            ideaModule "${rootProject.name}.${project.name}.main"
            args '--mod', mod_id, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
            taskName 'Data'
            mods {
                modDataRun {
                    source sourceSets.main
                }
            }
        }
    }
}

sourceSets.main.resources.srcDir 'src/generated/resources'

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"
    annotationProcessor("org.spongepowered:mixin:0.8.5-SNAPSHOT:processor")
}

jar.finalizedBy('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            fg.component(it)
        }
    }
}

sourceSets.each {
    def dir = layout.buildDirectory.dir("sourcesSets/$it.name")
    it.output.resourcesDir = dir
    it.java.destinationDirectory = dir
}

tasks.register('copyJarToBuild') {
    dependsOn 'jar'
    doLast {
        copy {
            from jar.archiveFile
            into rootProject.file("builds/${minecraft_version}")
        }
    }
}

build.finalizedBy('copyJarToBuild')

modrinth {
    token = rootProject.ext.modrinth_token
    projectId = "XXXXXX"
    versionNumber = "${version}"
    versionType = "release"
    uploadFile = jar
    gameVersions = ["${minecraft_version}"]
    loaders = ["forge"]
    changelog = "Changelog for version ${version}"
}

curseforge {
    apiKey = rootProject.ext.curseforge_token
    project {
        id = "XXXXXX"
        releaseType = "release"
        changelogType = "markdown"
        changelog = "Changelog for version ${version}"
        addGameVersion minecraft_version
        addGameVersion "Forge"
        mainArtifact(jar) {
            displayName = "SeamlessTrading-${version}-forge-${minecraft_version}"
        }
    }
}

tasks.modrinth.dependsOn(tasks.jar)
tasks.curseforge.dependsOn(tasks.jar)